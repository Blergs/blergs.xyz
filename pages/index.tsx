import type { NextPage } from "next";
import Head from "next/head";
import Grid from "../components/Grid";
import styles from "../styles/Home.module.css";
import RARITIES_DATA from "../data/rarities.json";
import BlergPreview from "../components/BlergPreview";
import Link from "next/link";
import { styled } from "../theme/stitches.config";
import Tabs from "../components/Tabs";
import { BlergRarity } from "../types";
import { useWallet } from "@web3-ui/core";
import { useMemo, useState } from "react";
import Select from "../components/Select";
import ExternalLink from "../components/ExternalLink";

enum SortType {
  RankAscending = "RankAscending",
  RankDescending = "RankDescending",
  NameAscending = "NameAscending",
  NameDescending = "NameDescending",
}

const Home: NextPage = () => {
  const { connected } = useWallet();
  const [sortType, setSortType] = useState<SortType>(SortType.RankAscending);

  const allBlergs = useMemo(() => {
    const ALL_BLERGS = RARITIES_DATA.slice(0, 10);
    return sortTokens(ALL_BLERGS, sortType);
  }, [sortType]);

  const myBlergs = useMemo(() => {
    const ALL_BLERGS = RARITIES_DATA.slice(0, 0);
    return sortTokens(ALL_BLERGS, sortType);
  }, [sortType]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Blergs</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.png" />
      </Head>

      <FilterContainer>
        <Select
          defaultValue={SortType.RankAscending.toString()}
          onValueChange={(value) => {
            setSortType(value as SortType);
          }}
          label="Sort by"
          options={[
            {
              id: SortType.RankAscending.toString(),
              label: "Rank 1 > 431",
              value: SortType.RankAscending.toString(),
            },
            {
              id: SortType.RankDescending.toString(),
              label: "Rank 431 > 1",
              value: SortType.RankDescending.toString(),
            },
            {
              id: SortType.NameAscending.toString(),
              label: "Name 1 > 431",
              value: SortType.NameAscending.toString(),
            },
            {
              id: SortType.NameDescending.toString(),
              label: "Name 431 > 1",
              value: SortType.NameDescending.toString(),
            },
          ]}
        />
      </FilterContainer>
      <Tabs
        showTabs={connected}
        defaultTabId="allBlergs"
        title="Filter Blergs"
        tabs={[
          {
            content: <BlergsGrid blergs={allBlergs} />,
            id: "allBlergs",
            title: "All",
          },
          {
            content: (
              <BlergsGrid
                blergs={myBlergs}
                emptyMessage={
                  <EmptyMessage>
                    <h3>There are no blergs in your Wallet... yet</h3>
                    <ExternalLink
                      type="primary"
                      href="https://opensea.io/collection/the-blerginning?search[sortAscending]=true&search[sortBy]=PRICE&search[toggles][0]=BUY_NOW"
                    >
                      Opensea
                    </ExternalLink>
                  </EmptyMessage>
                }
              />
            ),
            id: "myBlergs",
            title: "Mine",
          },
        ]}
      />
    </div>
  );
};

export default Home;

const BlergLink = styled("a", {
  overflow: "hidden",
  aspectRatio: "1/1",
});

interface BlergsGridProps {
  blergs: BlergRarity[];
  emptyMessage?: React.ReactNode;
}

const BlergsGrid = ({ blergs, emptyMessage }: BlergsGridProps) => {
  return (
    <main
      className={styles.main}
      style={{
        backgroundColor: blergs.length === 0 ? "white" : undefined,
      }}
    >
      <Grid>
        {blergs.map((blerg) => (
          <Link key={blerg.tokenId} href={`/blerg/${blerg.tokenId}`} passHref>
            <BlergLink>
              <BlergPreview blerg={blerg} />
            </BlergLink>
          </Link>
        ))}
      </Grid>
      {blergs.length === 0 && emptyMessage}
    </main>
  );
};

const sortTokens = (tokens: BlergRarity[], sortType: SortType) => {
  switch (sortType) {
    case SortType.RankAscending:
      return tokens.sort((a, b) => a.rank - b.rank);
    case SortType.RankDescending:
      return tokens.sort((a, b) => b.rank - a.rank);
    case SortType.NameAscending:
      return tokens.sort((a, b) => {
        if (a.tokenId > b.tokenId) {
          return 1;
        }
        if (a.tokenId < b.tokenId) {
          return -1;
        }

        return 0;
      });
    case SortType.NameDescending:
      return tokens.sort((a, b) => {
        if (a.tokenId > b.tokenId) {
          return -1;
        }
        if (a.tokenId < b.tokenId) {
          return 1;
        }

        return 0;
      });
  }
};

const FilterContainer = styled("div", {
  position: "absolute",
  right: "40px",
  top: 12,
  display: "none",
  "@bp2": {
    display: "block",
  },
});

const EmptyMessage = styled("div", {
  display: "flex",
  flexDirection: "column",
  alignItems: "center",
  width: 264,
  h3: {
    fontSize: 20,
    color: "$black",
    marginBottom: 38,
    marginTop: 100,
  },
});
